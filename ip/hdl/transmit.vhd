-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transmit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_TVALID : IN STD_LOGIC;
    s_axis_TREADY : OUT STD_LOGIC;
    s_axis_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_gmii_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    m_gmii_V_full_n : IN STD_LOGIC;
    m_gmii_V_write : OUT STD_LOGIC;
    tx_status : OUT STD_LOGIC_VECTOR (19 downto 0);
    tx_status_ap_vld : OUT STD_LOGIC );
end;


architecture behav of transmit is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "transmit,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.672000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=180,HLS_SYN_LUT=1390}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_155 : STD_LOGIC_VECTOR (9 downto 0) := "0101010101";
    constant ap_const_lv10_1D5 : STD_LOGIC_VECTOR (9 downto 0) := "0111010101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_EDB88320 : STD_LOGIC_VECTOR (31 downto 0) := "11101101101110001000001100100000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal crc_state_V : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    signal tmp_data_V_1_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_38 : BOOLEAN;
    signal grp_nbreadreq_fu_116_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_47 : BOOLEAN;
    signal tmp_user_V_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_226_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal frm_err_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal r_V_7_i_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal frm_err_1_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal tmp_9_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal frm_cnt_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_i1_fu_845_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcs_V_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcs_V_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal crc_state_V_load_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal frm_err1_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal tmp_220_fu_506_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_1_fu_857_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_1_fu_878_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_2_fu_917_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_3_fu_935_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_4_fu_953_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal empty_n_nbread_fu_147_p4_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_9_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_i_fu_248_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_244_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_i_cast_cast_fu_262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_i_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_1_i_fu_280_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_276_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_1_i_cast_cast_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_i_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_2_i_fu_312_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_308_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_2_i_cast_cast_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_i_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_3_i_fu_344_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_fu_340_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_3_i_cast_cast_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_i_10_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_4_i_fu_376_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_fu_372_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_4_i_cast_cast_fu_390_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_i_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_5_i_fu_408_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_31_fu_404_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_5_i_cast_cast_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_i_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_6_i_fu_440_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_32_fu_436_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_6_i_cast_cast_fu_454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_i_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_7_i_fu_472_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_468_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_7_i_cast_cast_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_547_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_557_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_txd_V_1_fu_539_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_12_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_i1_fu_599_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_fu_595_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_i1_cast_cast_fu_613_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_i1_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_1_i1_fu_631_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_fu_627_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_1_i1_cast_cast_fu_645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_i1_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_2_i1_fu_663_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_37_fu_659_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_2_i1_cast_cast_fu_677_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_i1_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_3_i1_fu_695_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_fu_691_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_3_i1_cast_cast_fu_709_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_i1_13_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_4_i1_fu_727_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_39_fu_723_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_4_i1_cast_cast_fu_741_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_i1_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_5_i1_fu_759_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_40_fu_755_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_5_i1_cast_cast_fu_773_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_i1_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_6_i1_fu_791_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_fu_787_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_6_i1_cast_cast_fu_805_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_i1_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_7_i1_fu_823_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_42_fu_819_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_7_i1_cast_cast_fu_837_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_874_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_assign_1_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_887_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_0120_1_fu_908_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0120_2_fu_926_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0120_3_fu_944_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- crc_state_V assign process. --
    crc_state_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2)))) then 
                crc_state_V <= r_V_7_i1_fu_845_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                crc_state_V <= r_V_7_i_fu_494_p2;
            end if; 
        end if;
    end process;

    -- crc_state_V_load_reg_183 assign process. --
    crc_state_V_load_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2)))) then 
                crc_state_V_load_reg_183 <= r_V_7_i1_fu_845_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                crc_state_V_load_reg_183 <= r_V_7_i_fu_494_p2;
            end if; 
        end if;
    end process;

    -- frm_err1_reg_203 assign process. --
    frm_err1_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2)))) then 
                frm_err1_reg_203 <= frm_err_1_fu_567_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                frm_err1_reg_203 <= frm_err_fu_232_p1;
            end if; 
        end if;
    end process;

    -- i_reg_172 assign process. --
    i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_220_p2))) then 
                i_reg_172 <= i_1_fu_226_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbreadreq_fu_116_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_47))) then 
                i_reg_172 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- val_assign_reg_192 assign process. --
    val_assign_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2)))) then 
                val_assign_reg_192 <= frm_cnt_fu_575_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                val_assign_reg_192 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_fu_521_p2))) then
                fcs_V_reg_1013 <= fcs_V_fu_868_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbreadreq_fu_116_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_47))) then
                tmp_data_V_1_reg_965 <= s_axis_TDATA;
                tmp_user_V_reg_971 <= s_axis_TUSER;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (m_gmii_V_full_n, ap_CS_fsm, grp_nbreadreq_fu_116_p5, ap_sig_bdd_47, tmp_9_fu_521_p2, exitcond1_fu_220_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((grp_nbreadreq_fu_116_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_47))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif (((grp_nbreadreq_fu_116_p5 = ap_const_lv1_0) and not(ap_sig_bdd_47))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond1_fu_220_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_9_fu_521_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((m_gmii_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_117 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_125 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_38 assign process. --
    ap_sig_bdd_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(s_axis_TVALID, grp_nbreadreq_fu_116_p5)
    begin
                ap_sig_bdd_47 <= ((s_axis_TVALID = ap_const_logic_0) and not((grp_nbreadreq_fu_116_p5 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_38)
    begin
        if (ap_sig_bdd_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_117)
    begin
        if (ap_sig_bdd_117) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_125)
    begin
        if (ap_sig_bdd_125) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    empty_n_nbread_fu_147_p4_0 <= (0=>(s_axis_TVALID), others=>'-');
    exitcond1_fu_220_p2 <= "1" when (i_reg_172 = ap_const_lv3_7) else "0";
    fcs_V_fu_868_p2 <= (crc_state_V_load_reg_183 xor ap_const_lv32_FFFFFFFF);
    frm_cnt_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(val_assign_reg_192));
    frm_err_1_fu_567_p3 <= (tmp_10_fu_557_p4 & tmp_6_fu_551_p2);
    frm_err_fu_232_p1 <= std_logic_vector(resize(unsigned(tmp_user_V_reg_971),32));
    grp_nbreadreq_fu_116_p5 <= (0=>(s_axis_TVALID), others=>'-');
    i_1_fu_226_p2 <= std_logic_vector(unsigned(i_reg_172) + unsigned(ap_const_lv3_1));

    -- m_gmii_V_din assign process. --
    m_gmii_V_din_assign_proc : process(m_gmii_V_full_n, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_9_fu_521_p2, exitcond1_fu_220_p2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, tmp_220_fu_506_p4, tmp_3_1_fu_857_p4, tmp_4_1_fu_878_p3, tmp_4_2_fu_917_p3, tmp_4_3_fu_935_p3, tmp_4_4_fu_953_p3, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((m_gmii_V_full_n = ap_const_logic_0)))) then 
            m_gmii_V_din <= ap_const_lv10_7;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            m_gmii_V_din <= tmp_4_4_fu_953_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            m_gmii_V_din <= tmp_4_3_fu_935_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            m_gmii_V_din <= tmp_4_2_fu_917_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_fu_521_p2))) then 
            m_gmii_V_din <= tmp_4_1_fu_878_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2)))) then 
            m_gmii_V_din <= tmp_3_1_fu_857_p4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            m_gmii_V_din <= tmp_220_fu_506_p4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_220_p2)))) then 
            m_gmii_V_din <= ap_const_lv10_1D5;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_220_p2))) then 
            m_gmii_V_din <= ap_const_lv10_155;
        else 
            m_gmii_V_din <= "XXXXXXXXXX";
        end if; 
    end process;


    -- m_gmii_V_write assign process. --
    m_gmii_V_write_assign_proc : process(m_gmii_V_full_n, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_9_fu_521_p2, exitcond1_fu_220_p2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((((ap_const_logic_1 = m_gmii_V_full_n) and ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = m_gmii_V_full_n) and ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = m_gmii_V_full_n) and ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = m_gmii_V_full_n) and (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_fu_521_p2)) or ((ap_const_logic_1 = m_gmii_V_full_n) and (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2))) or ((ap_const_logic_1 = m_gmii_V_full_n) and ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = m_gmii_V_full_n) and (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_220_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_220_p2) and (ap_const_logic_1 = m_gmii_V_full_n)))))))))))))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((m_gmii_V_full_n = ap_const_logic_0))))) then 
            m_gmii_V_write <= ap_const_logic_1;
        else 
            m_gmii_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_0120_1_fu_908_p4 <= fcs_V_reg_1013(15 downto 8);
    p_0120_2_fu_926_p4 <= fcs_V_reg_1013(23 downto 16);
    p_0120_3_fu_944_p4 <= fcs_V_reg_1013(31 downto 24);
    r_V_1_i1_fu_653_p2 <= (r_V_4_1_i1_cast_cast_fu_645_p3 xor tmp_24_fu_641_p1);
    r_V_1_i_fu_302_p2 <= (r_V_4_1_i_cast_cast_fu_294_p3 xor tmp_4_fu_290_p1);
    r_V_2_i1_fu_685_p2 <= (r_V_4_2_i1_cast_cast_fu_677_p3 xor tmp_25_fu_673_p1);
    r_V_2_i_fu_334_p2 <= (r_V_4_2_i_cast_cast_fu_326_p3 xor tmp_15_fu_322_p1);
    r_V_3_1_i1_fu_631_p4 <= r_V_i1_fu_621_p2(31 downto 1);
    r_V_3_1_i_fu_280_p4 <= r_V_i_fu_270_p2(31 downto 1);
    r_V_3_2_i1_fu_663_p4 <= r_V_1_i1_fu_653_p2(31 downto 1);
    r_V_3_2_i_fu_312_p4 <= r_V_1_i_fu_302_p2(31 downto 1);
    r_V_3_3_i1_fu_695_p4 <= r_V_2_i1_fu_685_p2(31 downto 1);
    r_V_3_3_i_fu_344_p4 <= r_V_2_i_fu_334_p2(31 downto 1);
    r_V_3_4_i1_fu_727_p4 <= r_V_i1_13_fu_717_p2(31 downto 1);
    r_V_3_4_i_fu_376_p4 <= r_V_i_10_fu_366_p2(31 downto 1);
    r_V_3_5_i1_fu_759_p4 <= r_V_8_i1_fu_749_p2(31 downto 1);
    r_V_3_5_i_fu_408_p4 <= r_V_8_i_fu_398_p2(31 downto 1);
    r_V_3_6_i1_fu_791_p4 <= r_V_5_i1_fu_781_p2(31 downto 1);
    r_V_3_6_i_fu_440_p4 <= r_V_5_i_fu_430_p2(31 downto 1);
    r_V_3_7_i1_fu_823_p4 <= r_V_6_i1_fu_813_p2(31 downto 1);
    r_V_3_7_i_fu_472_p4 <= r_V_6_i_fu_462_p2(31 downto 1);
    r_V_3_i1_fu_599_p4 <= tmp_i1_12_fu_589_p2(31 downto 1);
    r_V_3_i_fu_248_p4 <= tmp_i_9_fu_238_p2(31 downto 1);
    r_V_4_1_i1_cast_cast_fu_645_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_36_fu_627_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_1_i_cast_cast_fu_294_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_3_fu_276_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_2_i1_cast_cast_fu_677_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_37_fu_659_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_2_i_cast_cast_fu_326_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_5_fu_308_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_3_i1_cast_cast_fu_709_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_38_fu_691_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_3_i_cast_cast_fu_358_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_16_fu_340_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_4_i1_cast_cast_fu_741_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_39_fu_723_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_4_i_cast_cast_fu_390_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_18_fu_372_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_5_i1_cast_cast_fu_773_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_40_fu_755_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_5_i_cast_cast_fu_422_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_31_fu_404_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_6_i1_cast_cast_fu_805_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_41_fu_787_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_6_i_cast_cast_fu_454_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_32_fu_436_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_7_i1_cast_cast_fu_837_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_42_fu_819_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_7_i_cast_cast_fu_486_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_33_fu_468_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_i1_cast_cast_fu_613_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_35_fu_595_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_4_i_cast_cast_fu_262_p3 <= 
        ap_const_lv32_EDB88320 when (tmp_2_fu_244_p1(0) = '1') else 
        ap_const_lv32_0;
    r_V_5_i1_fu_781_p2 <= (r_V_4_5_i1_cast_cast_fu_773_p3 xor tmp_28_fu_769_p1);
    r_V_5_i_fu_430_p2 <= (r_V_4_5_i_cast_cast_fu_422_p3 xor tmp_20_fu_418_p1);
    r_V_6_i1_fu_813_p2 <= (r_V_4_6_i1_cast_cast_fu_805_p3 xor tmp_29_fu_801_p1);
    r_V_6_i_fu_462_p2 <= (r_V_4_6_i_cast_cast_fu_454_p3 xor tmp_21_fu_450_p1);
    r_V_7_i1_fu_845_p2 <= (r_V_4_7_i1_cast_cast_fu_837_p3 xor tmp_30_fu_833_p1);
    r_V_7_i_fu_494_p2 <= (r_V_4_7_i_cast_cast_fu_486_p3 xor tmp_22_fu_482_p1);
    r_V_8_i1_fu_749_p2 <= (r_V_4_4_i1_cast_cast_fu_741_p3 xor tmp_27_fu_737_p1);
    r_V_8_i_fu_398_p2 <= (r_V_4_4_i_cast_cast_fu_390_p3 xor tmp_19_fu_386_p1);
    r_V_i1_13_fu_717_p2 <= (r_V_4_3_i1_cast_cast_fu_709_p3 xor tmp_26_fu_705_p1);
    r_V_i1_fu_621_p2 <= (r_V_4_i1_cast_cast_fu_613_p3 xor tmp_23_fu_609_p1);
    r_V_i_10_fu_366_p2 <= (r_V_4_3_i_cast_cast_fu_358_p3 xor tmp_17_fu_354_p1);
    r_V_i_fu_270_p2 <= (r_V_4_i_cast_cast_fu_262_p3 xor tmp_s_fu_258_p1);

    -- s_axis_TREADY assign process. --
    s_axis_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_nbreadreq_fu_116_p5, ap_sig_bdd_47, ap_sig_cseq_ST_st4_fsm_3, tmp_9_fu_521_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbreadreq_fu_116_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_47)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_521_p2))))) then 
            s_axis_TREADY <= ap_const_logic_1;
        else 
            s_axis_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_557_p4 <= frm_err1_reg_203(31 downto 1);
    tmp_15_fu_322_p1 <= std_logic_vector(resize(unsigned(r_V_3_2_i_fu_312_p4),32));
    tmp_16_fu_340_p1 <= r_V_2_i_fu_334_p2(1 - 1 downto 0);
    tmp_17_fu_354_p1 <= std_logic_vector(resize(unsigned(r_V_3_3_i_fu_344_p4),32));
    tmp_18_fu_372_p1 <= r_V_i_10_fu_366_p2(1 - 1 downto 0);
    tmp_19_fu_386_p1 <= std_logic_vector(resize(unsigned(r_V_3_4_i_fu_376_p4),32));
    tmp_20_fu_418_p1 <= std_logic_vector(resize(unsigned(r_V_3_5_i_fu_408_p4),32));
    tmp_21_fu_450_p1 <= std_logic_vector(resize(unsigned(r_V_3_6_i_fu_440_p4),32));
    tmp_220_fu_506_p4 <= ((tmp_user_V_reg_971 & ap_const_lv1_1) & tmp_data_V_1_reg_965);
    tmp_22_fu_482_p1 <= std_logic_vector(resize(unsigned(r_V_3_7_i_fu_472_p4),32));
    tmp_23_fu_609_p1 <= std_logic_vector(resize(unsigned(r_V_3_i1_fu_599_p4),32));
    tmp_24_fu_641_p1 <= std_logic_vector(resize(unsigned(r_V_3_1_i1_fu_631_p4),32));
    tmp_25_fu_673_p1 <= std_logic_vector(resize(unsigned(r_V_3_2_i1_fu_663_p4),32));
    tmp_26_fu_705_p1 <= std_logic_vector(resize(unsigned(r_V_3_3_i1_fu_695_p4),32));
    tmp_27_fu_737_p1 <= std_logic_vector(resize(unsigned(r_V_3_4_i1_fu_727_p4),32));
    tmp_28_fu_769_p1 <= std_logic_vector(resize(unsigned(r_V_3_5_i1_fu_759_p4),32));
    tmp_29_fu_801_p1 <= std_logic_vector(resize(unsigned(r_V_3_6_i1_fu_791_p4),32));
    tmp_2_fu_244_p1 <= tmp_i_9_fu_238_p2(1 - 1 downto 0);
    tmp_30_fu_833_p1 <= std_logic_vector(resize(unsigned(r_V_3_7_i1_fu_823_p4),32));
    tmp_31_fu_404_p1 <= r_V_8_i_fu_398_p2(1 - 1 downto 0);
    tmp_32_fu_436_p1 <= r_V_5_i_fu_430_p2(1 - 1 downto 0);
    tmp_33_fu_468_p1 <= r_V_6_i_fu_462_p2(1 - 1 downto 0);
    tmp_34_fu_547_p1 <= frm_err1_reg_203(1 - 1 downto 0);
    tmp_35_fu_595_p1 <= tmp_i1_12_fu_589_p2(1 - 1 downto 0);
    tmp_36_fu_627_p1 <= r_V_i1_fu_621_p2(1 - 1 downto 0);
    tmp_37_fu_659_p1 <= r_V_1_i1_fu_653_p2(1 - 1 downto 0);
    tmp_38_fu_691_p1 <= r_V_2_i1_fu_685_p2(1 - 1 downto 0);
    tmp_39_fu_723_p1 <= r_V_i1_13_fu_717_p2(1 - 1 downto 0);
    tmp_3_1_fu_857_p4 <= ((s_axis_TUSER & ap_const_lv1_1) & tmp_txd_V_1_fu_539_p3);
    tmp_3_fu_276_p1 <= r_V_i_fu_270_p2(1 - 1 downto 0);
    tmp_40_fu_755_p1 <= r_V_8_i1_fu_749_p2(1 - 1 downto 0);
    tmp_41_fu_787_p1 <= r_V_5_i1_fu_781_p2(1 - 1 downto 0);
    tmp_42_fu_819_p1 <= r_V_6_i1_fu_813_p2(1 - 1 downto 0);
    tmp_43_fu_874_p1 <= fcs_V_fu_868_p2(8 - 1 downto 0);
    tmp_44_fu_887_p1 <= val_assign_reg_192(14 - 1 downto 0);
    tmp_4_1_fu_878_p3 <= (ap_const_lv2_1 & tmp_43_fu_874_p1);
    tmp_4_2_fu_917_p3 <= (ap_const_lv2_1 & p_0120_1_fu_908_p4);
    tmp_4_3_fu_935_p3 <= (ap_const_lv2_1 & p_0120_2_fu_926_p4);
    tmp_4_4_fu_953_p3 <= (ap_const_lv2_1 & p_0120_3_fu_944_p4);
    tmp_4_fu_290_p1 <= std_logic_vector(resize(unsigned(r_V_3_1_i_fu_280_p4),32));
    tmp_5_fu_308_p1 <= r_V_1_i_fu_302_p2(1 - 1 downto 0);
    tmp_6_fu_551_p2 <= (s_axis_TUSER or tmp_34_fu_547_p1);
    tmp_8_fu_515_p2 <= "1" when (signed(val_assign_reg_192) < signed(ap_const_lv32_3C)) else "0";
    tmp_9_fu_521_p2 <= (grp_nbreadreq_fu_116_p5 or tmp_8_fu_515_p2);
    tmp_i1_12_fu_589_p2 <= (crc_state_V xor tmp_i1_fu_581_p1);
    tmp_i1_fu_581_p1 <= std_logic_vector(resize(unsigned(tmp_txd_V_1_fu_539_p3),32));
    tmp_i_9_fu_238_p2 <= (tmp_i_fu_235_p1 xor ap_const_lv32_FFFFFFFF);
    tmp_i_fu_235_p1 <= std_logic_vector(resize(unsigned(tmp_data_V_1_reg_965),32));
    tmp_s_fu_258_p1 <= std_logic_vector(resize(unsigned(r_V_3_i_fu_248_p4),32));
    tmp_txd_V_1_fu_539_p3 <= 
        s_axis_TDATA when (empty_n_nbread_fu_147_p4_0(0) = '1') else 
        ap_const_lv8_0;
    tx_status <= ((ap_const_lv5_0 & val_assign_1_fu_891_p2) & tmp_44_fu_887_p1);

    -- tx_status_ap_vld assign process. --
    tx_status_ap_vld_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_9_fu_521_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_fu_521_p2))) then 
            tx_status_ap_vld <= ap_const_logic_1;
        else 
            tx_status_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    val_assign_1_fu_891_p2 <= "1" when (frm_err1_reg_203 = ap_const_lv32_0) else "0";
end behav;
