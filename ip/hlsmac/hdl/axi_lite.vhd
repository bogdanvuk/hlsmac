-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_lite is
generic (
    C_S_AXI_AXI_LITE_BUS_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXI_LITE_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    tx_status_V_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    tx_status_V_empty_n : IN STD_LOGIC;
    tx_status_V_read : OUT STD_LOGIC;
    s_axi_axi_lite_bus_AWVALID : IN STD_LOGIC;
    s_axi_axi_lite_bus_AWREADY : OUT STD_LOGIC;
    s_axi_axi_lite_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_axi_lite_bus_WVALID : IN STD_LOGIC;
    s_axi_axi_lite_bus_WREADY : OUT STD_LOGIC;
    s_axi_axi_lite_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_BUS_DATA_WIDTH-1 downto 0);
    s_axi_axi_lite_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_axi_lite_bus_ARVALID : IN STD_LOGIC;
    s_axi_axi_lite_bus_ARREADY : OUT STD_LOGIC;
    s_axi_axi_lite_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_axi_lite_bus_RVALID : OUT STD_LOGIC;
    s_axi_axi_lite_bus_RREADY : IN STD_LOGIC;
    s_axi_axi_lite_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_BUS_DATA_WIDTH-1 downto 0);
    s_axi_axi_lite_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_axi_lite_bus_BVALID : OUT STD_LOGIC;
    s_axi_axi_lite_bus_BREADY : IN STD_LOGIC;
    s_axi_axi_lite_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axi_lite is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_lite,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.912250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=954,HLS_SYN_LUT=2552}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_40 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal tx_64_V_i : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_64_V_o : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_64_V_o_ap_vld : STD_LOGIC;
    signal tx_65_127_V_i : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_65_127_V_o : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_65_127_V_o_ap_vld : STD_LOGIC;
    signal tx_128_255_V_i : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_128_255_V_o : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_128_255_V_o_ap_vld : STD_LOGIC;
    signal tx_256_511_V_i : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_256_511_V_o : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_256_511_V_o_ap_vld : STD_LOGIC;
    signal tx_512_1023_V_i : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_512_1023_V_o : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_512_1023_V_o_ap_vld : STD_LOGIC;
    signal tx_1024_max_V_i : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_1024_max_V_o : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_1024_max_V_o_ap_vld : STD_LOGIC;
    signal dummy_last_V_i : STD_LOGIC_VECTOR (31 downto 0);
    signal dummy_last_V_o : STD_LOGIC_VECTOR (31 downto 0);
    signal dummy_last_V_o_ap_vld : STD_LOGIC;
    signal axi_lite_axi_lite_bus_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal empty_n_fu_191_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp6_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp9_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_287_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_294_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_301_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_199_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_209_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_225_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_241_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_257_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component axi_lite_axi_lite_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        tx_64_V_o : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_64_V_o_ap_vld : IN STD_LOGIC;
        tx_64_V_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_256_511_V_o : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_256_511_V_o_ap_vld : IN STD_LOGIC;
        tx_256_511_V_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        dummy_last_V_o : IN STD_LOGIC_VECTOR (31 downto 0);
        dummy_last_V_o_ap_vld : IN STD_LOGIC;
        dummy_last_V_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        tx_65_127_V_o : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_65_127_V_o_ap_vld : IN STD_LOGIC;
        tx_65_127_V_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_128_255_V_o : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_128_255_V_o_ap_vld : IN STD_LOGIC;
        tx_128_255_V_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_512_1023_V_o : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_512_1023_V_o_ap_vld : IN STD_LOGIC;
        tx_512_1023_V_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_1024_max_V_o : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_1024_max_V_o_ap_vld : IN STD_LOGIC;
        tx_1024_max_V_i : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    axi_lite_axi_lite_bus_s_axi_U : component axi_lite_axi_lite_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_LITE_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_LITE_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_axi_lite_bus_AWVALID,
        AWREADY => s_axi_axi_lite_bus_AWREADY,
        AWADDR => s_axi_axi_lite_bus_AWADDR,
        WVALID => s_axi_axi_lite_bus_WVALID,
        WREADY => s_axi_axi_lite_bus_WREADY,
        WDATA => s_axi_axi_lite_bus_WDATA,
        WSTRB => s_axi_axi_lite_bus_WSTRB,
        ARVALID => s_axi_axi_lite_bus_ARVALID,
        ARREADY => s_axi_axi_lite_bus_ARREADY,
        ARADDR => s_axi_axi_lite_bus_ARADDR,
        RVALID => s_axi_axi_lite_bus_RVALID,
        RREADY => s_axi_axi_lite_bus_RREADY,
        RDATA => s_axi_axi_lite_bus_RDATA,
        RRESP => s_axi_axi_lite_bus_RRESP,
        BVALID => s_axi_axi_lite_bus_BVALID,
        BREADY => s_axi_axi_lite_bus_BREADY,
        BRESP => s_axi_axi_lite_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => axi_lite_axi_lite_bus_s_axi_U_ap_dummy_ce,
        tx_64_V_o => tx_64_V_o,
        tx_64_V_o_ap_vld => tx_64_V_o_ap_vld,
        tx_64_V_i => tx_64_V_i,
        tx_256_511_V_o => tx_256_511_V_o,
        tx_256_511_V_o_ap_vld => tx_256_511_V_o_ap_vld,
        tx_256_511_V_i => tx_256_511_V_i,
        dummy_last_V_o => dummy_last_V_o,
        dummy_last_V_o_ap_vld => dummy_last_V_o_ap_vld,
        dummy_last_V_i => dummy_last_V_i,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        tx_65_127_V_o => tx_65_127_V_o,
        tx_65_127_V_o_ap_vld => tx_65_127_V_o_ap_vld,
        tx_65_127_V_i => tx_65_127_V_i,
        tx_128_255_V_o => tx_128_255_V_o,
        tx_128_255_V_o_ap_vld => tx_128_255_V_o_ap_vld,
        tx_128_255_V_i => tx_128_255_V_i,
        tx_512_1023_V_o => tx_512_1023_V_o,
        tx_512_1023_V_o_ap_vld => tx_512_1023_V_o_ap_vld,
        tx_512_1023_V_i => tx_512_1023_V_i,
        tx_1024_max_V_o => tx_1024_max_V_o,
        tx_1024_max_V_o_ap_vld => tx_1024_max_V_o_ap_vld,
        tx_1024_max_V_i => tx_1024_max_V_i);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, empty_n_fu_191_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((empty_n_fu_191_p1 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (empty_n_fu_191_p1 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (empty_n_fu_191_p1 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    axi_lite_axi_lite_bus_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- dummy_last_V_o assign process. --
    dummy_last_V_o_assign_proc : process(dummy_last_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_10_fu_315_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)))) then 
            dummy_last_V_o <= tmp_10_fu_315_p2;
        else 
            dummy_last_V_o <= dummy_last_V_i;
        end if; 
    end process;


    -- dummy_last_V_o_ap_vld assign process. --
    dummy_last_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)))) then 
            dummy_last_V_o_ap_vld <= ap_const_logic_1;
        else 
            dummy_last_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_n_fu_191_p1 <= (0=>tx_status_V_empty_n, others=>'-');
    icmp3_fu_235_p2 <= "1" when (tmp_6_fu_225_p4 = ap_const_lv6_0) else "0";
    icmp6_fu_251_p2 <= "1" when (tmp_8_fu_241_p4 = ap_const_lv5_0) else "0";
    icmp9_fu_267_p2 <= "1" when (tmp_11_fu_257_p4 = ap_const_lv4_0) else "0";
    icmp_fu_219_p2 <= "1" when (tmp_4_fu_209_p4 = ap_const_lv7_0) else "0";
    tmp_10_fu_315_p2 <= std_logic_vector(unsigned(dummy_last_V_i) + unsigned(ap_const_lv32_1));
    tmp_11_fu_257_p4 <= tx_status_V_dout(13 downto 10);
    tmp_1_fu_308_p2 <= std_logic_vector(unsigned(tx_64_V_i) + unsigned(ap_const_lv64_1));
    tmp_2_fu_199_p1 <= tx_status_V_dout(14 - 1 downto 0);
    tmp_3_fu_301_p2 <= std_logic_vector(unsigned(tx_65_127_V_i) + unsigned(ap_const_lv64_1));
    tmp_4_fu_209_p4 <= tx_status_V_dout(13 downto 7);
    tmp_5_fu_294_p2 <= std_logic_vector(unsigned(tx_128_255_V_i) + unsigned(ap_const_lv64_1));
    tmp_6_fu_225_p4 <= tx_status_V_dout(13 downto 8);
    tmp_7_fu_287_p2 <= std_logic_vector(unsigned(tx_256_511_V_i) + unsigned(ap_const_lv64_1));
    tmp_8_fu_241_p4 <= tx_status_V_dout(13 downto 9);
    tmp_9_fu_280_p2 <= std_logic_vector(unsigned(tx_512_1023_V_i) + unsigned(ap_const_lv64_1));
    tmp_fu_203_p2 <= "1" when (tmp_2_fu_199_p1 = ap_const_lv14_40) else "0";
    tmp_s_fu_273_p2 <= std_logic_vector(unsigned(tx_1024_max_V_i) + unsigned(ap_const_lv64_1));

    -- tx_1024_max_V_o assign process. --
    tx_1024_max_V_o_assign_proc : process(tx_1024_max_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, icmp6_fu_251_p2, icmp9_fu_267_p2, tmp_s_fu_273_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and (ap_const_lv1_0 = icmp3_fu_235_p2) and (ap_const_lv1_0 = icmp6_fu_251_p2) and (ap_const_lv1_0 = icmp9_fu_267_p2))) then 
            tx_1024_max_V_o <= tmp_s_fu_273_p2;
        else 
            tx_1024_max_V_o <= tx_1024_max_V_i;
        end if; 
    end process;


    -- tx_1024_max_V_o_ap_vld assign process. --
    tx_1024_max_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, icmp6_fu_251_p2, icmp9_fu_267_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and (ap_const_lv1_0 = icmp3_fu_235_p2) and (ap_const_lv1_0 = icmp6_fu_251_p2) and (ap_const_lv1_0 = icmp9_fu_267_p2))) then 
            tx_1024_max_V_o_ap_vld <= ap_const_logic_1;
        else 
            tx_1024_max_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tx_128_255_V_o assign process. --
    tx_128_255_V_o_assign_proc : process(tx_128_255_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, tmp_5_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and not((ap_const_lv1_0 = icmp3_fu_235_p2)))) then 
            tx_128_255_V_o <= tmp_5_fu_294_p2;
        else 
            tx_128_255_V_o <= tx_128_255_V_i;
        end if; 
    end process;


    -- tx_128_255_V_o_ap_vld assign process. --
    tx_128_255_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and not((ap_const_lv1_0 = icmp3_fu_235_p2)))) then 
            tx_128_255_V_o_ap_vld <= ap_const_logic_1;
        else 
            tx_128_255_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tx_256_511_V_o assign process. --
    tx_256_511_V_o_assign_proc : process(tx_256_511_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, icmp6_fu_251_p2, tmp_7_fu_287_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and (ap_const_lv1_0 = icmp3_fu_235_p2) and not((ap_const_lv1_0 = icmp6_fu_251_p2)))) then 
            tx_256_511_V_o <= tmp_7_fu_287_p2;
        else 
            tx_256_511_V_o <= tx_256_511_V_i;
        end if; 
    end process;


    -- tx_256_511_V_o_ap_vld assign process. --
    tx_256_511_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, icmp6_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and (ap_const_lv1_0 = icmp3_fu_235_p2) and not((ap_const_lv1_0 = icmp6_fu_251_p2)))) then 
            tx_256_511_V_o_ap_vld <= ap_const_logic_1;
        else 
            tx_256_511_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tx_512_1023_V_o assign process. --
    tx_512_1023_V_o_assign_proc : process(tx_512_1023_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, icmp6_fu_251_p2, icmp9_fu_267_p2, tmp_9_fu_280_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and (ap_const_lv1_0 = icmp3_fu_235_p2) and (ap_const_lv1_0 = icmp6_fu_251_p2) and not((ap_const_lv1_0 = icmp9_fu_267_p2)))) then 
            tx_512_1023_V_o <= tmp_9_fu_280_p2;
        else 
            tx_512_1023_V_o <= tx_512_1023_V_i;
        end if; 
    end process;


    -- tx_512_1023_V_o_ap_vld assign process. --
    tx_512_1023_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, icmp3_fu_235_p2, icmp6_fu_251_p2, icmp9_fu_267_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and (ap_const_lv1_0 = icmp_fu_219_p2) and (ap_const_lv1_0 = icmp3_fu_235_p2) and (ap_const_lv1_0 = icmp6_fu_251_p2) and not((ap_const_lv1_0 = icmp9_fu_267_p2)))) then 
            tx_512_1023_V_o_ap_vld <= ap_const_logic_1;
        else 
            tx_512_1023_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tx_64_V_o assign process. --
    tx_64_V_o_assign_proc : process(tx_64_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, tmp_1_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_203_p2)))) then 
            tx_64_V_o <= tmp_1_fu_308_p2;
        else 
            tx_64_V_o <= tx_64_V_i;
        end if; 
    end process;


    -- tx_64_V_o_ap_vld assign process. --
    tx_64_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and not((ap_const_lv1_0 = tmp_fu_203_p2)))) then 
            tx_64_V_o_ap_vld <= ap_const_logic_1;
        else 
            tx_64_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tx_65_127_V_o assign process. --
    tx_65_127_V_o_assign_proc : process(tx_65_127_V_i, ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2, tmp_3_fu_301_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and not((ap_const_lv1_0 = icmp_fu_219_p2)))) then 
            tx_65_127_V_o <= tmp_3_fu_301_p2;
        else 
            tx_65_127_V_o <= tx_65_127_V_i;
        end if; 
    end process;


    -- tx_65_127_V_o_ap_vld assign process. --
    tx_65_127_V_o_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, empty_n_fu_191_p1, tmp_fu_203_p2, icmp_fu_219_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((empty_n_fu_191_p1 = ap_const_lv1_0)) and (ap_const_lv1_0 = tmp_fu_203_p2) and not((ap_const_lv1_0 = icmp_fu_219_p2)))) then 
            tx_65_127_V_o_ap_vld <= ap_const_logic_1;
        else 
            tx_65_127_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- tx_status_V_read assign process. --
    tx_status_V_read_assign_proc : process(tx_status_V_empty_n, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = tx_status_V_empty_n))) then 
            tx_status_V_read <= ap_const_logic_1;
        else 
            tx_status_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
